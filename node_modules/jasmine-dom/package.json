{
  "name": "jasmine-dom",
  "version": "0.3.3",
  "description": "Run your jasmine html SpecRunner in node.js.",
  "keywords": [
    "javascript testing",
    "bdd",
    "jasmine"
  ],
  "homepage": "https://github.com/andrewpmckenzie/node-jasmine-dom",
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewpmckenzie/node-jasmine-dom.git"
  },
  "author": {
    "name": "Andrew McKenzie",
    "email": "andrew@mckenzie.name",
    "url": "http://andrew.mckenzie.name"
  },
  "thanks-to": "jasmine-node",
  "engines": {
    "node": ">= 0.4.9"
  },
  "dependencies": {
    "jsdom": "0.2.1",
    "node-static": "0.5.7",
    "yaml": "0.2.1",
    "request": "2.0.2",
    "cssom": "0.2.0",
    "htmlparser": "1.7.3"
  },
  "bin": {
    "jasmine-dom": "bin/jasmine-dom"
  },
  "main": "lib/jasmine-dom",
  "readme": "node-jasmine-dom\n================\n\nRun your browser-based [jasmine][1] specs headless with [node.js][2]. Then \noutput in one of many formats such as JSON or JUnit XML (perfect\nfor integration with CI servers like [Jenkins][3]).\n\ninstallation\n------------\n1. you've got [npm][4], right?\n2. Groovy. <code>npm install jasmine-dom</code>, and you're away laughing.\n\nusage\n-----\nConstruct your SpecRunner.html as shown in the jasmine examples,\nthen run:\n\n    jasmine-dom --runner path/to/SpecRunner.html\n\nor\n\n    jasmine-dom --config path/to/config.yaml\n\nYou can optionally provide the following arguments:\n\n * <code>--help</code>, provides usage information\n * <code>--format simple|detailed|nice|json|html|junit</code>, displays the result in the specified format\n * <code>--output path</code>, writes the output to the specified file\n * <code>--server [port]</code>, serves a simple (but effective) page showing the current state\n                                 of the tests. You can also specify an optional <code>--refresh\n                                 intervalInMS</code> argument to specify the wait between running\n                                 the tests (because the server is constantly running 'em).\n * <code>--routeconsole</code>, calls to window.console.log (or error, warn, info) within the tests / tested code\n                                will be displayed in the terminal output\n\nserver\n------\n\n    jasmine-dom --runner examples/runner.html --server 8090 --refresh 3000\n\nwill run a server on http://localhost:8090/. Here a simple green or red page will reflect the current state\nof your tests. The tests will run every 3000ms, and the page ajaximatically updates with the result.\n\nIf you'd like to see the default jasmine html, visit http://localhost:8090/jasmine. Note, the result is still\nobtained via the nodejs runner (i.e. it wasn't run in your browser).\n\nspecifying runners\n------------------\nA single runner file can be provided via the <code>--runner <path_to_runner></code> command. To specify more than one\nrunner, use the <code>--config <path_to_config></code> argument and a yaml config file in the format:\n\n```yaml\n---\n  test_one:\n    name: This is the name of the first set of tests\n    runner: path/to/runner_1.html\n  test_two:\n    name: This is the name of the second set of tests\n    runner: path/to/another/runner.html\n```\n\nThe config file allows you to provide names for your runners. These names will be used when identifying failing tests.\n\nexample 1\n---------\n    jasmine-dom --runner examples/runner.html\n\nwill output:\n\n    Failed.\n\nexample 2\n---------\n\n    jasmine-dom --runner examples/runner.html --format junit --output javascript_results.xml\n\nwill write to javascript_results.xml:\n\n    <testsuite>\n        <testcase classname=\"/Users/andrew/development/node-jasmine-dom/examples/runner.html.Example_functions_that_update_the_DOM.Should_add_two_numbers\" name=\"expect toEqual 7\" time=\"undefined\"/>\n        <testcase classname=\"/Users/andrew/development/node-jasmine-dom/examples/runner.html.Example_functions.Should_multiply_two_numbers\" name=\"expect toEqual 40\" time=\"undefined\"/>\n        <testcase classname=\"/Users/andrew/development/node-jasmine-dom/examples/runner.html.Example_functions.Should_fail!!\" name=\"expect toEqual 8\">\n            <failure>\n                <![CDATA[\n                    FAILURE in spec \"Should fail!!\": Expected 3 to equal 8.\n                    Error: Expected 3 to equal 8.\n                        at new <anonymous> (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:94:50)\n                        at [object Object].toEqual (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:1138:29)\n                        at [object Object].<anonymous> (/Users/andrew/development/node-jasmine-dom/examples/tests/spec/example-functions_spec.js:10:13)\n                        at [object Object].execute (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:968:15)\n                        at [object Object].next_ (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:1739:31)\n                        at [object Object].start (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:1692:8)\n                        at [object Object].execute (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:2018:14)\n                        at [object Object].next_ (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:1739:31)\n                        at [object Object].start (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:1692:8)\n                        at [object Object].execute (/Users/andrew/development/node-jasmine-dom/examples/tests/lib/jasmine.js:2163:14)\n                ]]>\n            </failure>\n        </testcase>\n    </testsuite>\n\nexample 3\n---------\n\n    jasmine-dom --config ./examples/config.yaml --format nice\n\nwith ./examples/config.yaml:\n\n    ---\n      test_one:\n        name: Example test one\n        runner: ./runner.html\n      test_two:\n        name: Example test two\n        runner: ./runner2.html\n\nwill output:\n\n    ====== FAILED ====== \n     - In A suite that fails >> Example functions (should fail) >> Should fail!! :: Expected 3 to equal 8.\n\nexample 4\n---------\n\n    jasmine-dom --config ./examples/config.yaml --format detailed\n\nwill output:\n\n    ====== FAILED ====== \n\n    Example functions (should fail) - 2 tests \n      PASSES \n        - Should multiply two numbers \n      FAILURES \n        - Should fail!! \n            [Expected 3 to equal 8.] \n    Example functions that update the DOM - 2 tests \n      PASSES \n        - Should add two numbers \n        - Should divide two numbers \n      FAILURES \n        (none) \n\n    ====== FAILED ====== \n\n\nchangelog\n---------\n0.3.0 - 22-12-2012 - Added 'detailed' report format. Made examples a bit clearer.\n\nhave you seen **[jasmine-node][5]**?\n------------------------------------\nIt's provided a lot of inspiration for this project, and may be just what\nyou're looking for. If you're not reliant on a DOM, then it's worth checking\nout.\n\n[1]: http://pivotal.github.com/jasmine/\n[2]: http://nodejs.org/\n[3]: http://jenkins-ci.org/\n[4]: http://npmjs.org/\n[5]: https://github.com/mhevery/jasmine-node\n",
  "_id": "jasmine-dom@0.3.3",
  "dist": {
    "shasum": "107ec0a11e0cfbf47d67cbd4b7ecb9f11c259b6c"
  },
  "_from": "jasmine-dom"
}
